# Amazon Bedrock AgentCore Configuration
# These environment variables should be set in your CDK stack or AWS Lambda configuration

# Specific Agent IDs for each specialist (get these from AWS console after creating agents)
BEDROCK_HEALTH_AGENT_ID=your-health-assistant-agent-id
BEDROCK_APPOINTMENT_AGENT_ID=your-appointment-agent-id
BEDROCK_COMMUNITY_AGENT_ID=your-community-agent-id
BEDROCK_DOCUMENT_AGENT_ID=your-document-agent-id
BEDROCK_ROUTER_AGENT_ID=your-router-agent-id

# Agent Alias (use TSTALIASID for testing, create production alias later)
BEDROCK_AGENT_ALIAS_ID=TSTALIASID

# Amazon Models Configuration (recommended for production)
MODEL_ID=amazon.titan-text-express-v1
# Alternative models:
# MODEL_ID=amazon.titan-text-lite-v1
# MODEL_ID=amazon.titan-text-premier-v1:0

# AWS Region (global users, use us-east-1)
REGION=us-east-1

# Lambda Function Names (for chat router)
HEALTH_ASSISTANT_FUNCTION=EnablHealthAssistantFunction
APPOINTMENT_AGENT_FUNCTION=EnablAppointmentAgentFunction
COMMUNITY_AGENT_FUNCTION=EnablCommunityAgentFunction
DOCUMENT_AGENT_FUNCTION=EnablDocumentAgentFunction

# DynamoDB Tables
REMINDERS_TABLE=EnablReminders
USER_PREFERENCES_TABLE=EnablUserPreferences
DOCUMENTS_TABLE=EnablDocuments

# S3 Buckets
DOCUMENTS_BUCKET=enabl-health-documents

# AgentCore Benefits:
# ✅ Advanced reasoning and planning capabilities
# ✅ Multi-step task completion
# ✅ Context-aware decision making
# ✅ Integration with AWS services
# ✅ Built-in safety guardrails
# ✅ Trace logging for debugging
# ✅ Session management
# ✅ Scalable serverless architecture

# Amazon Models Benefits:
# ✅ Optimized for AWS infrastructure
# ✅ Lower latency within AWS
# ✅ Cost-effective for production
# ✅ HIPAA eligible for health data
# ✅ Built-in content filtering
# ✅ Consistent API across models
# ✅ No external API dependencies
